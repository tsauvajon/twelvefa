version: 2
jobs:
  test:
    docker:
      - image: circleci/golang:1.12.7

    working_directory: /home/circleci/twelvefa
    steps:
      - checkout

      - run:
          name: Init
          command: |
            chmod +x install.ci.sh
            ./install.ci.sh
            mkdir artifacts

      - run:
          name: Build
          command: |
            chmod +x generate.ci.sh
            ./generate.ci.sh
            go build

      - run:
          name: Test the service
          command: |
            go test -v . ./calc > ./artifacts/tests.txt
            cat ./artifacts/tests.txt

      - run:
          name: Benchmark calc
          command: |
            go test ./calc -bench=. > ./artifacts/benchmark.txt
            cat ./artifacts/benchmark.txt

      - run:
          name: Test the client
          command: |
            PORT=3000 ./twelvefa & # run the service in the background to test the client
            sleep 5 # wait for the service to start
            go test -v ./cli > ./artifacts/cli-tests.txt
            cat ./artifacts/cli-tests.txt

      - store_artifacts:
          path: artifacts

  build:
    docker:
      - image: google/cloud-sdk:255.0.0

    working_directory: /home/circleci/twelvefa
    environment:
      SERVICE_IMAGE_NAME: twelvefa
      CLI_IMAGE_NAME: calcli
      CIRCLECI_CREDS: ./creds/circleci.json
    steps:
      - checkout

      - run:
          name: Install Docker # from a downloaded binary
          command: |
            set -x # better output formatting
            VER="19.03.1"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv -f /tmp/docker/* /usr/bin

      # Necessary step with CircleCI to use a newly installed Docker
      # https://circleci.com/docs/2.0/building-docker-images/#overview
      - setup_remote_docker

      - run:
          name: Build the service Docker image
          command: >-
            docker build
            -t gcr.io/${GOOGLE_PROJECT_ID}/${SERVICE_IMAGE_NAME}:latest
            --build-arg CIRCLECI_BUILD_NUMBER=${CIRCLE_BUILD_NUM} .

      - run:
          name: Build the CLI Docker image
          command: >-
            docker build
            -f ./cli/Dockerfile
            -t gcr.io/${GOOGLE_PROJECT_ID}/${CLI_IMAGE_NAME}:latest
            --build-arg CIRCLECI_BUILD_NUMBER=${CIRCLE_BUILD_NUM} .

      - run:
          name: Tag the service image with build nb
          command: >-
            docker tag
            gcr.io/${GOOGLE_PROJECT_ID}/${SERVICE_IMAGE_NAME}:latest
            gcr.io/${GOOGLE_PROJECT_ID}/${SERVICE_IMAGE_NAME}:${CIRCLE_BUILD_NUM}

      - run:
          name: Tag the CLI image with build nb
          command: >-
            docker tag
            gcr.io/${GOOGLE_PROJECT_ID}/${CLI_IMAGE_NAME}:latest
            gcr.io/${GOOGLE_PROJECT_ID}/${CLI_IMAGE_NAME}:${CIRCLE_BUILD_NUM}

      - run:
          name: Init the gcloud SDK
          command: |
            mkdir creds
            echo ${GOOGLE_CIRCLECI} > $CIRCLECI_CREDS
            gcloud auth activate-service-account --key-file $CIRCLECI_CREDS
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run:
          name: Push images to the Container Registry
          command: |
            gcloud auth configure-docker
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${SERVICE_IMAGE_NAME}:latest
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${SERVICE_IMAGE_NAME}:${CIRCLE_BUILD_NUM}
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${CLI_IMAGE_NAME}:latest
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${CLI_IMAGE_NAME}:${CIRCLE_BUILD_NUM}

  deploy:
    docker:
      - image: google/cloud-sdk:255.0.0

    working_directory: /home/circleci/twelvefa
    environment:
      SERVICE_IMAGE_NAME: twelvefa
      CLI_IMAGE_NAME: calcli
      TF_CREDS: ./creds/terraform.json
      TF_VERSION: 0.12.6
      GCR_SERVICE_IMAGE: gcr.io/${GOOGLE_PROJECT_ID}/${SERVICE_IMAGE_NAME}:${CIRCLE_BUILD_NUM}
      GCR_CLI_IMAGE: gcr.io/${GOOGLE_PROJECT_ID}/${CLI_IMAGE_NAME}:${CIRCLE_BUILD_NUM}
      TF_VAR_project_id`: ${GOOGLE_PROJECT_ID}
      TF_VAR_region`: ${GOOGLE_COMPUTE_REGION}
      TF_VAR_location`: ${GOOGLE_COMPUTE_ZONE}
      TF_VAR_cluster_name`: ${GOOGLE_CLUSTER_NAME}
    steps:
      - checkout

      - run:
          name: Install Terraform
          command: |
            curl -O https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
            apt-get update
            apt-get install -y unzip
            unzip terraform_${TF_VERSION}_linux_amd64.zip
            mkdir creds
            echo ${GOOGLE_TERRAFORM} > $TF_CREDS

      - run: 
          name: Apply the infrastructure
          command: |
            ./terraform init -input=false
            mkdir artifacts
            ./terraform plan -out artifacts/infra.tfplan > artifacts/tf-changes.txt
            ./terraform apply -auto-approve -input=false
            # In a production project, I would store the tfstate in a bucket

      - run:
          name: Init the gcloud SDK
          command: |
            gcloud auth activate-service-account --key-file $TF_CREDS
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            gcloud auth configure-docker

      - run: 
          name: Deploy the cluster
          command: |
            # Use # as a delimiter for sed, to make dealing with forward slashes easier
            sed "s#gcr.io/ori-tsauvajon/calcli:latest#${GCR_CLI_IMAGE}#g" k8s/calcli-deployment.yaml > k8s/calcli-deployment.yaml
            sed "s#gcr.io/ori-tsauvajon/calcli:latest#${GCR_SERVICE_IMAGE}#g" k8s/twelvefa-deployment.yaml > k8s/twelvefa-deployment.yaml
            kubectl apply -f k8s

      # I don't want to keep the project up as this is just a PoC,
      # so immediatly after creating the infra I destroy it.
      # I did my tests by running the commands outside of the CI.
      - run: 
          name: Tear down the infra
          command: ./terraform destroy -auto-approve -input=false

      - store_artifacts:
          path: artifacts

workflows:
  version: 2
  workflow:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
